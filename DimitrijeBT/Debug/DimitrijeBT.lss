
DimitrijeBT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000026e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000026e  00000302  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000047  00800060  00800060  00000302  2**0
                  ALLOC
  3 .stab         000009b4  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000de0  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001a98  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001aac  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	73 c0       	rjmp	.+230    	; 0xf6 <__vector_7>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>
  22:	0f c0       	rjmp	.+30     	; 0x42 <__bad_interrupt>
  24:	0e c0       	rjmp	.+28     	; 0x42 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	a7 3a       	cpi	r26, 0xA7	; 167
  3a:	b2 07       	cpc	r27, r18
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	f2 d0       	rcall	.+484    	; 0x224 <main>
  40:	14 c1       	rjmp	.+552    	; 0x26a <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <sendMsg>:
bool addToActionQueue(uint8_t value, uint8_t duration);


void sendMsg(uint8_t oneByte)
{
	UDR = oneByte;
  44:	8c b9       	out	0x0c, r24	; 12
	waitTxReady();
  46:	5d 9b       	sbis	0x0b, 5	; 11
  48:	fe cf       	rjmp	.-4      	; 0x46 <sendMsg+0x2>
	UDR = '\n';
  4a:	8a e0       	ldi	r24, 0x0A	; 10
  4c:	8c b9       	out	0x0c, r24	; 12
	waitTxReady();
  4e:	5d 9b       	sbis	0x0b, 5	; 11
  50:	fe cf       	rjmp	.-4      	; 0x4e <sendMsg+0xa>
}
  52:	08 95       	ret

00000054 <charToInt>:

uint8_t charToInt(uint8_t data){
	uint8_t result = 0;

	if(data < '0'){
  54:	80 33       	cpi	r24, 0x30	; 48
  56:	50 f0       	brcs	.+20     	; 0x6c <charToInt+0x18>
		result = 0;
	}else if(data < 58){
  58:	8a 33       	cpi	r24, 0x3A	; 58
  5a:	30 f0       	brcs	.+12     	; 0x68 <charToInt+0x14>
		result -= '0';
	}else if(data < 'A'){
  5c:	9f eb       	ldi	r25, 0xBF	; 191
  5e:	98 0f       	add	r25, r24
  60:	96 30       	cpi	r25, 0x06	; 6
  62:	20 f4       	brcc	.+8      	; 0x6c <charToInt+0x18>
		result = 0;
	}else if(data < 'G'){
		result = data - 'A' + 10;
  64:	87 53       	subi	r24, 0x37	; 55
  66:	08 95       	ret
	uint8_t result = 0;

	if(data < '0'){
		result = 0;
	}else if(data < 58){
		result -= '0';
  68:	80 ed       	ldi	r24, 0xD0	; 208
  6a:	08 95       	ret

uint8_t charToInt(uint8_t data){
	uint8_t result = 0;

	if(data < '0'){
		result = 0;
  6c:	80 e0       	ldi	r24, 0x00	; 0
	}else{
		result = 0;
	}

	return result;
}
  6e:	08 95       	ret

00000070 <uart_init>:


void uart_init(void)
{

	DDRD = 2; // set TX pin as output
  70:	82 e0       	ldi	r24, 0x02	; 2
  72:	81 bb       	out	0x11, r24	; 17

	// lets set the baud rate
	UBRRL = (unsigned char)BAUD_PRESCALE;
  74:	86 e0       	ldi	r24, 0x06	; 6
  76:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8);
  78:	12 b8       	out	0x02, r1	; 2

	// enable tx and rx
	UCSRB = (1<<TXEN) | (1<<RXEN);
  7a:	88 e1       	ldi	r24, 0x18	; 24
  7c:	8a b9       	out	0x0a, r24	; 10

	//  enable RX interrupt
	UCSRB |= (1 << RXCIE);
  7e:	57 9a       	sbi	0x0a, 7	; 10

	rx_index = 0;
  80:	10 92 60 00 	sts	0x0060, r1
  84:	08 95       	ret

00000086 <custom_delay>:
}


void custom_delay(uint8_t interval){
	while((interval > 0) && !stopCurrent_flag ){
  86:	88 23       	and	r24, r24
  88:	61 f0       	breq	.+24     	; 0xa2 <custom_delay+0x1c>
  8a:	90 91 62 00 	lds	r25, 0x0062
  8e:	91 11       	cpse	r25, r1
  90:	08 c0       	rjmp	.+16     	; 0xa2 <custom_delay+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	e7 ea       	ldi	r30, 0xA7	; 167
  94:	f1 e6       	ldi	r31, 0x61	; 97
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <custom_delay+0x10>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <custom_delay+0x16>
  9c:	00 00       	nop
		_delay_ms(100);
		interval--;
  9e:	81 50       	subi	r24, 0x01	; 1
  a0:	f2 cf       	rjmp	.-28     	; 0x86 <custom_delay>
	}

	stopCurrent_flag = false;
  a2:	10 92 62 00 	sts	0x0062, r1
  a6:	08 95       	ret

000000a8 <addToActionQueue>:
}


bool addToActionQueue(uint8_t value, uint8_t duration){
	if(QueueFull()){
  a8:	20 91 63 00 	lds	r18, 0x0063
  ac:	90 91 64 00 	lds	r25, 0x0064
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	29 1b       	sub	r18, r25
  b4:	31 09       	sbc	r19, r1
  b6:	2f 71       	andi	r18, 0x1F	; 31
  b8:	33 27       	eor	r19, r19
  ba:	2f 31       	cpi	r18, 0x1F	; 31
  bc:	31 05       	cpc	r19, r1
  be:	c9 f0       	breq	.+50     	; 0xf2 <__stack+0x13>
		return false;
	}

	ActionQueue[WrIdx & QueueMask].state = value;
  c0:	e0 91 63 00 	lds	r30, 0x0063
  c4:	ef 71       	andi	r30, 0x1F	; 31
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	ee 0f       	add	r30, r30
  ca:	ff 1f       	adc	r31, r31
  cc:	ea 59       	subi	r30, 0x9A	; 154
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
  d0:	80 83       	st	Z, r24
	ActionQueue[WrIdx & QueueMask].delay = duration;
  d2:	e0 91 63 00 	lds	r30, 0x0063
  d6:	ef 71       	andi	r30, 0x1F	; 31
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	ee 0f       	add	r30, r30
  dc:	ff 1f       	adc	r31, r31
  de:	ea 59       	subi	r30, 0x9A	; 154
  e0:	ff 4f       	sbci	r31, 0xFF	; 255
  e2:	61 83       	std	Z+1, r22	; 0x01
	WrIdx++;
  e4:	80 91 63 00 	lds	r24, 0x0063
  e8:	8f 5f       	subi	r24, 0xFF	; 255
  ea:	80 93 63 00 	sts	0x0063, r24
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	08 95       	ret
}


bool addToActionQueue(uint8_t value, uint8_t duration){
	if(QueueFull()){
		return false;
  f2:	80 e0       	ldi	r24, 0x00	; 0

	ActionQueue[WrIdx & QueueMask].state = value;
	ActionQueue[WrIdx & QueueMask].delay = duration;
	WrIdx++;
	return true;
}
  f4:	08 95       	ret

000000f6 <__vector_7>:

	return result;
}


ISR(USART_RX_vect) {
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	2f 93       	push	r18
 102:	3f 93       	push	r19
 104:	4f 93       	push	r20
 106:	5f 93       	push	r21
 108:	6f 93       	push	r22
 10a:	7f 93       	push	r23
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
 110:	af 93       	push	r26
 112:	bf 93       	push	r27
 114:	ef 93       	push	r30
 116:	ff 93       	push	r31

	uint8_t received = UDR;
 118:	8c b1       	in	r24, 0x0c	; 12

	if(received == msgStart){
 11a:	8a 33       	cpi	r24, 0x3A	; 58
 11c:	11 f4       	brne	.+4      	; 0x122 <__vector_7+0x2c>
		rx_index = 0;
 11e:	10 92 60 00 	sts	0x0060, r1
	}

	switch(rx_index){
 122:	90 91 60 00 	lds	r25, 0x0060
 126:	92 30       	cpi	r25, 0x02	; 2
 128:	61 f0       	breq	.+24     	; 0x142 <__vector_7+0x4c>
 12a:	30 f4       	brcc	.+12     	; 0x138 <__vector_7+0x42>
 12c:	91 30       	cpi	r25, 0x01	; 1
 12e:	91 f5       	brne	.+100    	; 0x194 <__vector_7+0x9e>
		case 1:
			rcvPinState = charToInt(received) << 4;
 130:	91 df       	rcall	.-222    	; 0x54 <charToInt>
 132:	82 95       	swap	r24
 134:	80 7f       	andi	r24, 0xF0	; 240
 136:	09 c0       	rjmp	.+18     	; 0x14a <__vector_7+0x54>

	if(received == msgStart){
		rx_index = 0;
	}

	switch(rx_index){
 138:	93 30       	cpi	r25, 0x03	; 3
 13a:	51 f0       	breq	.+20     	; 0x150 <__vector_7+0x5a>
 13c:	94 30       	cpi	r25, 0x04	; 4
 13e:	71 f0       	breq	.+28     	; 0x15c <__vector_7+0x66>
 140:	29 c0       	rjmp	.+82     	; 0x194 <__vector_7+0x9e>
		case 1:
			rcvPinState = charToInt(received) << 4;
			break;
		case 2:
			rcvPinState += charToInt(received);
 142:	88 df       	rcall	.-240    	; 0x54 <charToInt>
 144:	90 91 65 00 	lds	r25, 0x0065
 148:	89 0f       	add	r24, r25
 14a:	80 93 65 00 	sts	0x0065, r24
			break;
 14e:	26 c0       	rjmp	.+76     	; 0x19c <__vector_7+0xa6>
		case 3:
			rcvDuration = charToInt(received) << 4;
 150:	81 df       	rcall	.-254    	; 0x54 <charToInt>
 152:	82 95       	swap	r24
 154:	80 7f       	andi	r24, 0xF0	; 240
 156:	80 93 a6 00 	sts	0x00A6, r24
			break;
 15a:	20 c0       	rjmp	.+64     	; 0x19c <__vector_7+0xa6>
		case 4:
		{
			rcvDuration += charToInt(received);
 15c:	7b df       	rcall	.-266    	; 0x54 <charToInt>
 15e:	90 91 a6 00 	lds	r25, 0x00A6
 162:	89 0f       	add	r24, r25
 164:	80 93 a6 00 	sts	0x00A6, r24
			/* All received */
			if(rcvPinState == msgStopCurrent){
 168:	80 91 65 00 	lds	r24, 0x0065
 16c:	8e 3f       	cpi	r24, 0xFE	; 254
 16e:	21 f4       	brne	.+8      	; 0x178 <__vector_7+0x82>
				stopCurrent_flag = true;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	80 93 62 00 	sts	0x0062, r24
 176:	12 c0       	rjmp	.+36     	; 0x19c <__vector_7+0xa6>
			}else if(rcvPinState == msgStopAll){
 178:	80 91 65 00 	lds	r24, 0x0065
 17c:	8f 3f       	cpi	r24, 0xFF	; 255
 17e:	21 f4       	brne	.+8      	; 0x188 <__vector_7+0x92>
				stopAll_flag = true;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	80 93 61 00 	sts	0x0061, r24
 186:	0a c0       	rjmp	.+20     	; 0x19c <__vector_7+0xa6>
			}else{
				addToActionQueue(rcvPinState, rcvDuration);
 188:	60 91 a6 00 	lds	r22, 0x00A6
 18c:	80 91 65 00 	lds	r24, 0x0065
 190:	8b df       	rcall	.-234    	; 0xa8 <addToActionQueue>
 192:	04 c0       	rjmp	.+8      	; 0x19c <__vector_7+0xa6>
			}
			break;
		}
		default:
			rcvPinState = 0;
 194:	10 92 65 00 	sts	0x0065, r1
			rcvDuration = 0;
 198:	10 92 a6 00 	sts	0x00A6, r1
			break;
	}

	/* Increment but prevent wrap around */
	if(rx_index < 0xFE){
 19c:	80 91 60 00 	lds	r24, 0x0060
 1a0:	8e 3f       	cpi	r24, 0xFE	; 254
 1a2:	28 f4       	brcc	.+10     	; 0x1ae <__vector_7+0xb8>
		rx_index++;
 1a4:	80 91 60 00 	lds	r24, 0x0060
 1a8:	8f 5f       	subi	r24, 0xFF	; 255
 1aa:	80 93 60 00 	sts	0x0060, r24
	}
}
 1ae:	ff 91       	pop	r31
 1b0:	ef 91       	pop	r30
 1b2:	bf 91       	pop	r27
 1b4:	af 91       	pop	r26
 1b6:	9f 91       	pop	r25
 1b8:	8f 91       	pop	r24
 1ba:	7f 91       	pop	r23
 1bc:	6f 91       	pop	r22
 1be:	5f 91       	pop	r21
 1c0:	4f 91       	pop	r20
 1c2:	3f 91       	pop	r19
 1c4:	2f 91       	pop	r18
 1c6:	0f 90       	pop	r0
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	0f 90       	pop	r0
 1cc:	1f 90       	pop	r1
 1ce:	18 95       	reti

000001d0 <getFromActionQueue>:
	return true;
}


bool getFromActionQueue(uint8_t* state, uint8_t* duration){
	if(QueueEmpty()){
 1d0:	20 91 63 00 	lds	r18, 0x0063
 1d4:	40 91 64 00 	lds	r20, 0x0064
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	24 1b       	sub	r18, r20
 1dc:	31 09       	sbc	r19, r1
 1de:	2f 71       	andi	r18, 0x1F	; 31
 1e0:	33 27       	eor	r19, r19
 1e2:	23 2b       	or	r18, r19
 1e4:	e9 f0       	breq	.+58     	; 0x220 <getFromActionQueue+0x50>
		return false;
	}

	*state = ActionQueue[RdIdx & QueueMask].state;
 1e6:	e0 91 64 00 	lds	r30, 0x0064
 1ea:	ef 71       	andi	r30, 0x1F	; 31
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	ee 0f       	add	r30, r30
 1f0:	ff 1f       	adc	r31, r31
 1f2:	ea 59       	subi	r30, 0x9A	; 154
 1f4:	ff 4f       	sbci	r31, 0xFF	; 255
 1f6:	20 81       	ld	r18, Z
 1f8:	fc 01       	movw	r30, r24
 1fa:	20 83       	st	Z, r18
	*duration = ActionQueue[RdIdx & QueueMask].delay;
 1fc:	e0 91 64 00 	lds	r30, 0x0064
 200:	ef 71       	andi	r30, 0x1F	; 31
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	ee 0f       	add	r30, r30
 206:	ff 1f       	adc	r31, r31
 208:	ea 59       	subi	r30, 0x9A	; 154
 20a:	ff 4f       	sbci	r31, 0xFF	; 255
 20c:	81 81       	ldd	r24, Z+1	; 0x01
 20e:	fb 01       	movw	r30, r22
 210:	80 83       	st	Z, r24

	RdIdx++;
 212:	80 91 64 00 	lds	r24, 0x0064
 216:	8f 5f       	subi	r24, 0xFF	; 255
 218:	80 93 64 00 	sts	0x0064, r24
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	08 95       	ret
}


bool getFromActionQueue(uint8_t* state, uint8_t* duration){
	if(QueueEmpty()){
		return false;
 220:	80 e0       	ldi	r24, 0x00	; 0
	*state = ActionQueue[RdIdx & QueueMask].state;
	*duration = ActionQueue[RdIdx & QueueMask].delay;

	RdIdx++;
	return true;
}
 222:	08 95       	ret

00000224 <main>:


int main( void ){
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	00 d0       	rcall	.+0      	; 0x22a <main+0x6>
 22a:	cd b7       	in	r28, 0x3d	; 61
 22c:	dd 27       	eor	r29, r29

	uint8_t state, duration;

	ACSR |= 1 << ACD; /* Disable analog comparer to reduce power consumption */
 22e:	47 9a       	sbi	0x08, 7	; 8

	DDRB = 0xFF; /* Configure output port B*/
 230:	8f ef       	ldi	r24, 0xFF	; 255
 232:	87 bb       	out	0x17, r24	; 23

	uart_init();
 234:	1d df       	rcall	.-454    	; 0x70 <uart_init>

	sei();
 236:	78 94       	sei

	while(1){
		if(getFromActionQueue(&state, &duration)){
 238:	be 01       	movw	r22, r28
 23a:	6f 5f       	subi	r22, 0xFF	; 255
 23c:	7f 4f       	sbci	r23, 0xFF	; 255
 23e:	ce 01       	movw	r24, r28
 240:	02 96       	adiw	r24, 0x02	; 2
 242:	c6 df       	rcall	.-116    	; 0x1d0 <getFromActionQueue>
 244:	88 23       	and	r24, r24
 246:	29 f0       	breq	.+10     	; 0x252 <main+0x2e>

			PORTB = (state << 1);  /* Only pins 1 through 7 are connected  */
 248:	8a 81       	ldd	r24, Y+2	; 0x02
 24a:	88 0f       	add	r24, r24
 24c:	88 bb       	out	0x18, r24	; 24
			custom_delay(duration);
 24e:	89 81       	ldd	r24, Y+1	; 0x01
 250:	1a df       	rcall	.-460    	; 0x86 <custom_delay>
		}

		if(stopAll_flag){
 252:	80 91 61 00 	lds	r24, 0x0061
 256:	88 23       	and	r24, r24
 258:	79 f3       	breq	.-34     	; 0x238 <main+0x14>

			PORTB = 0;
 25a:	18 ba       	out	0x18, r1	; 24
			RdIdx = WrIdx;
 25c:	80 91 63 00 	lds	r24, 0x0063
 260:	80 93 64 00 	sts	0x0064, r24
			stopAll_flag = false;
 264:	10 92 61 00 	sts	0x0061, r1
 268:	e7 cf       	rjmp	.-50     	; 0x238 <main+0x14>

0000026a <_exit>:
 26a:	f8 94       	cli

0000026c <__stop_program>:
 26c:	ff cf       	rjmp	.-2      	; 0x26c <__stop_program>
